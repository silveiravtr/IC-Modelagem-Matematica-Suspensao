# -*- coding: utf-8 -*-
"""Impulso.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T3ZrlTb60LnEgg45LPU19pnGLllnl9i1
"""

#Importando bibliotecas
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

#Parâmetros do sistema
m1 = 6.0       #Massa não suspensa [kg]
m2 = 58.5      #Massa suspensa [kg]
k1 = 39500.0   #Rigidez do pneu [N/m]
k2 = 3950.0    #Rigidez da mola da suspensão [N/m]

#Coeficientes de amortecimento para diferentes valores de zeta
zeta = [0.7, 1.0, 1.4]
b = [2 * z * np.sqrt(k2 * m2) for z in zeta]

#Configuração da simulação temporal
t_span = (0, 2)  # Tempo inicial e final [s]
t_eval = np.arange(0, 2.001, 0.001)  # Vetor temporal com passo de 1ms

#Função de entrada impulso (delta de Dirac aproximada)
def u_impulso(t):
    #Aproximação do impulso: pulso muito estreito e alto
    if 0 <= t <= 0.001: #Duração de 1ms
        return 1000.0 #Área = 1 (1000 * 0.001)
    else:
        return 0.0


def sistema_impulso(t, Y, m1, m2, b, k1, k2):
    x, dx, y, dy = Y  # Descompacta os estados

    #Equações diferenciais do sistema
    ddx = (-b * (dx - dy) - k2 * (x - y) - k1 * (x - u_impulso(t))) / m1
    ddy = (-b * (dy - dx) - k2 * (y - x)) / m2

    return [dx, ddx, dy, ddy]

#Simulação para cada valor de amortecimento
for i, bi in enumerate(b):
    #Resolve o sistema de EDOs
    sol = solve_ivp(sistema_impulso, t_span, [0, 0, 0, 0],
                    args=(m1, m2, bi, k1, k2),
                    t_eval=t_eval,
                    method='RK45',
                    rtol=1e-6, atol=1e-8)  #Tolerâncias reduzidas para precisão

    #Extrai os resultados
    x = sol.y[0] #Posição da massa não suspensa
    y = sol.y[2] #Posição da massa suspensa

    #Plot dos resultados
    plt.figure(figsize=(10, 4))
    plt.plot(t_eval, x, label='x(t) - Massa não suspensa')
    plt.plot(t_eval, y, '--', label='y(t) - Massa suspensa')

    plt.title(f'Resposta ao Impulso para ζ = {zeta[i]}')
    plt.xlabel('Tempo [s]')
    plt.ylabel('Amplitude')
    plt.grid(True)
    plt.legend()
    plt.tight_layout()


    plt.show()